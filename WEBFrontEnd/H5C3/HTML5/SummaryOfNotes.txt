博学之, 审问之, 慎思之, 明辨之, 笃行之;
壹、贰、叁、肆、伍、陆、柒、捌、玖、拾;














壹.网络状态
    通过window.navigator.online检测网络状态;
    返回布尔值; 但不同浏览器之间会存在差异;
    所以H5提供了两个事件online和offline;
    online用户网络连接时被调用
    offline用户网络断开时被调用;
    监听的都是window对象;















贰.全屏

    全屏显示可以是任意元素, 取消全屏只能是document;
    IE9+才会支持, 高版本浏览器也会有兼容问题, 所以根据不同的浏览器需要添加不同的前缀 moz == ms == webkit == o;
    1.Node.requestFullScreen()  开启全屏显示;
    2.Node.cancelFullScreen()   关闭全屏显示;
        webkit内核:     (chrome,safari...);
            webkitRequestFullScreen();
            webkitCancelFullScreen();
        Gecko内核:
            mozRequestFullScreen(); 
            mozCancelFullScreen(); 

        注意微软的坑: ms;       screen开头小写;
            msRequestFullscreen();
            msCancelFullscreen();
    

    3.是否全屏;
        检测当前是否状态, 同样根据不同的浏览器需要添加不同的前缀;
        document.webkitIsFullScreen()
        全屏伪类选择器:
            :full-screen;
            :moz-full-screen;
            :webkit-full-screen;













叁.文件读取

    上传文件的内容显示到页面上或上传完毕显示略缩图等应用;

    input[type=file]的multiple属性是H5新增的, 用来指定多个文件进行上传;
    通过FileReader对象可以读取本地文件,使用file对象来指定所要读取的文件或数据.
    其中file文件可以是来自用户在一个元素上选择文件后返回的FileList对象,
    也可以是来自拖放操作生成的datatransfer;


    Files对象;
        由于html5中可以通过 multiple指定多个文件,
        因此通过input[file]上传后得到的是一个Files对象(一个伪数组);
    

    FileReader对象;
        html5新增内置对象; 可读取本地文件内容;
        var reader = new FileReader();
        可实例化一个对象, 实例方法:
        1. readAsDataURL();
            以DataURL形式读取文件;
            事件监听:
                onload      当文件读取完成时调用;
                onerror     当读取操作错误时调用;
                onabort     当读取操作中止时调用;
                
            属性:
                result  文件读取结果;
                error   再读取文件时发生错误;
                readyState  表明FileReader当前状态;
                    EMPTY	0	还没有加载任何数据.
                    LOADING	1	数据正在被加载.
                    DONE	2	已完成全部的读取请求.
                
            方法:
                readAsArrayBuffer()
                    开始读取文件内容, 成功之后: result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象.
                readAsBinaryString() 
                    开始读取文件内容, 成功之后: result属性中将包含所读取文件的原始二进制数据。
                readAsDataURL()
                    开始读取文件内容, 成功之后: result属性中将包含一个data: URL格式的Base64字符串以表示所读取 文件的内容。
                readAsText()
                    开始读取文件内容, 成功之后: result属性中将包含一个字符串以表示所读取的文件内容。
                   













肆.地理定位;
    在HTML5规范中增加了获取用户地理信息的API,
    方便了我们基于用户地理位置开发互联网应用;

    1.获取当前位置信息;
        navigator.geolocation.getCurrentPosition(successCallback, errorCallback);
    2.重复获取当前地理位置信息;
        navigator.geolocation.watchPosition(successCallback, errorCallback);

    成功回掉属性:
        position.coords.latitude;
        位置纬度;
        position.coords.longitude;
        位置经度;
        position.coords.accuracy
        位置精度;
        position.coords.altitude
        海拔高度;
        
    失败毁掉属性:
        Permission denied           用户不允许地理定位
        Position unavailable        无法获取当前位置
        Timeout                     操作超时
        unknown error               未知错误
    
    
    
    












伍.百度地图:

    通过调用第三方API(如百度地图)来实现地理定位, 这些API都是基于用户当前位置的, 并将位置(经纬度)当作参数传递, 来实现响应的功能;

    创建应用密钥时, 指定的ip白名单, 需要用*包裹, 多个地址用英文分割;
    
    百度官方文档太官方, 下面是引入百度地图1.0版本必带的参数项目, 3.0版本指定版本和ak即可, webgl根据需求指定;
        
        ak=百度密钥
        __ec_v__=应用编号
        type=webgl
        v=x.0

    百度地图有时全景图无法显示的原因是因为该地区不再网络开放, 比如天安门, 中南海, 一些军事化管理区,国家安全机密区域不会开放,
    这些地区无法显示很正常;

    百度地图名片, 在开发者工具选项中制定, 是一个不错的功能;

    百度地图开发者文档自行查阅;
    https://lbsyun.baidu.com/

    






















陆.H5拖拽
    
    在HTML5中, 拖放是标准的一部分, 任何元素都能够拖放: p, div, img, a, video等....
    
    拖拽和释放:
        拖拽: Drag;
        释放: Drop;
        
    拖拽指的是鼠标点击源对象后一直移动对象不松手, 一旦松手即释放了;
    

        设置元素为可拖放;
            draggable属性; 就是在标签上设置draggable=true属性; 否则不会有效果;
            注意: 链接和图片默认是可拖动的; 不需要draggable属性;
        
        
        拖拽API的相关事件;
            被拖动的源对象可以触发的事件;
            ondragstart:                            源对象开始被拖动;
            ondrag:                                 源对象被拖动过程中
                                                    (不断触发);
            ondragend:                              源对象被拖动结束;
            
        拖动源对象拖入目标对象可以触发的事件:
            ondragenter:                            目标对象被源对象拖动着进入;
            ondragover:                             目标对象被源对象拖动悬停在上方
                                                    (不断触发);
            ondragleave:                            源对象拖动着离开了目标对象;
            ondrop:                                 源对象拖动在目标对象上方释放;
                                                    阻止掉dragover的默认事件方可触发drop事件;
        拖拽API总共就是以上7个函数;
            
        
        一般拖放都是事件都是绑定在document上的; 如果绑定到某个元素上, 就需要给这些元素每一个添加拖拽事件;
        使用事件委托直接绑定大document上会方便很多;
        
        DataTransfer
            在进行拖放操作时, DataTransfer对象用来保存拖动的数据, 它可以保存一项或多项数据, 一种或多种数据类型;
            可以理解为用来代替全局变量targetSource的一个对象;
            
            setData()的键类型有以下几种;
                文本HTML类型使用 'text/html'
                普通文本类型使用  'text/plain'
                路径存储类型使用  'text/uri-list'
            
            getData()
                获取数据时, 只需要指定类型即可, setData()设的什么类型, getData()就取什么类型; 设值取值的类型必须统一;
























柒.WEB存储;

    随着互联网的快速发展, 基于网页的应用越来越普遍, 同时也变得越来越复杂, 为了满足各种需求, 会经常在本地存储大量的数据;
    HTML5规范也提出了基于网页的WEB存储解决方案;

    特性:
        1.设置,读取方便;
        2.容量较大, sessionStorage约5M, localStorage约20M;
        3.只能存储字符串, 可以讲对象通过 JSON.stringify()编码后存储;

    window.sessionStorage
        1.生命周期为关闭浏览器窗口;
        2.在同一个窗口下数据可以共享;
    
    window.localStorage
        1.永久生效,除非手动删除;
        2.可以多个窗口共享数据;

    方法详解:
        setItem(key,value)          设置存储内容;
        getItem(key)                读取存储内容;
        removeItem(key)             删除键值为key的存储内容;
        clear()                     清空所有存储内容;
        
    其他:
        WEBSQL, IndexDB, Cookie;
    


    cookie:
        expires                 cookie什么时间内有效(cookie的保质期);
        domain                  domain是域名，path是路径，两者加起来就构成了 URL
        path                    domain是域名，path是路径，两者加起来就构成了 URL
        secure                  secure选项用来设置cookie只在确保安全的请求中才会发送
        HttpOnly                HttpOnly用来设置cookie是否能通过 js 去访问;
        
        cookie多个属性之间用;分割;
        要想修改一个cookie，只需要重新赋值就行，旧的值会被新的值覆盖;
        删除一个cookie, 也是重新赋值，只要将这个新cookie的expires 选项设置为一个过去的时间点即可;
    

        缺点:cookie会每次随http请求一起发送，浪费宽带
    






    












捌.应用缓存离线缓存;
    应用缓存:
        HTML5中可以轻松的构建一个离线应用(无网络状态), 只需创建一个cache manifest文件;
        
    优势:
        1.可配置需要缓存的资源;
        2.网络无连接仍可以应用;
        3.本地读取缓存资源,提升访问速度, 增加用户体验;
        4.减少请求, 缓解服务器负担;
    
    缓存清单:
        一个普通文本文件, 其中列出了浏览器应缓存以供离线访问的资源, 推荐使用.appcache为后缀;
        例如创建了一个名为demo.appcache的文件, 然后再需要应用缓存的页面的跟元素(html)添加属性
        manifest="demo.appcache", 路径要保证正确;
        
    mainfest文件格式*
        1.声明CACHE MANIFEST(离线缓存);
        2.CACHE: 指定需要缓存的静态资源, 如:css,image,js等;
        3.NETWORK: 指定需要在线访问的资源, 可使用通配符;
        4.FALLBACK: 当被缓存的文件找不到时的备用资源;

            # CACHE MANIFEST
            # 上面必须是第一行
            # CACHE:
                # 此部分写需要缓存的资源
            # NETWORK:
                # 此部分要写需要有网络才可访问的资源, 无网络(离线)时不会读取此部分;
                # 一般用*表示有网络时所有文件均需要进行网络请求，而不使用缓存
            # FALLBACK:
                # 当访问不到某个资源的情况下, 规定用另一个资源转换;

    其他:
        1.CACHE可以省略, 但必须将缓存的资源写在CACHE MANIFEST中
        2.指定多个CACHE, NETWORK, FALLBACK, 无顺序限制;
        3.#表示注释, 只有当.appcache文件内容发生改变或手动清除缓存后, 才会重新缓存;
        4.chrome可以通过 chrome://appcache-internals/工具和离线(online)模式来调试管理应用缓存;






















玖.多媒体音视频
    多媒体:
        方法: load(), play(), pause();
        属性: currentSrc, currentTime, duration;
        事件: oncanplay, ontimeupdate, onended等;
    
        这些方法、属性和事件允许您使用 JavaScript 来操作 <audio> 和 <video> 元素, 这些API是原生JS来操作的;
    
        更多API自查阅官方文档:
        https://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp



















拾.WebSocket

    websocket协议是基于TCP的一种新的网络协议, 可以实现浏览器和服务器全双工(full-duplex)网络通信
    全双工: 允许服务器主动发送信息给客户端, 也允许客户端主动发消息给服务器;

    websocket是一种持久协议, http是非持久协议;

    http: 客户端给服务端发送请求, 服务端返回客户端响应就结束了;

    很多网站的是是推送需求, 比如聊天, 客服咨询等都是需要socket协议支持;

    早起没有socket协议时, http协议需要通过ajax轮询来实现socket的应用场景;
    
    服务器无法主动给浏览器发送数据, 因此浏览器就需要定时给服务器发送请求(比如定时发送1s一次);
    服务器把最新的数据响应给客户端, 这种模式的就太过于浪费性能和资源;
    
    http不是实时的, 如果1s中给服务器发送一次请求, 那么就是一秒会中返回给客户端响应数据;
    socket是实时的, 如果服务器端有消息会自动发送到客户端, 不需要http那种定时的客户端向服务器端询问又没有消息...

    请求发送出去后可以在network下的WS中监听到发送的内容;

    
    
    
    创建websocket对象:
        var socket = new WebSocket(url, [protocol]);
        
    事件:
        open                连接建立时触发;
        message             客户端接收到服务端数据时触发;
        error               通信发生错误时触发;
        close               连接关闭时触发;

    方法:
        send()              使用连接发送数据;
        close()             关闭连接;
    


















拾壹.Canvas
    canvas是H5新增的图形绘制技术;
    canvas标签之间的所有内容都不会展示到页面上, 全程都是通过JS和H5API控制的;
    所以如果有些低版本浏览器不支持时, canvas标签中的内容才会显示出来;

    canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：

    var canvas = document.getElementById('canvas');     获取canvas元素;

    var ctx = canvas.getContext('2d');                  获取canvas元素的上下文并指定图形类型(2d or 3d);

    canvas是画布, ctx(声明的类型上下文)可以理解为画笔, 之后的一切操作都是通过ctx这个画笔实现的;
    
    fillRect(x, y, width, height)                       绘制填充矩形;
    fillStyle = 'color'                                 声明填充;
    strokeRect(x, y, width, height)                     绘制描边矩形;
    strokeStyle = 'color'                               声明描边;
    clearRect(x, y, width, height)                      清除矩形;
    lineWidth = number                                  定义画笔宽度;
    arc(x,y, 半径, 开始角度, 结束角度, 顺时针/逆时针)         绘制圆形, false为顺时针, true为逆时针, 默认false(顺时针);
    
    
    渐变对象:
        线性渐变:
            var linearGradients = ctx.createLinearGradient(x1,y1,x2,y2);              声明渐变类型(参数规定起点x轴y轴和终点x轴y轴);
                                                                                    渐变色的参数声明x和y轴的范围多大是规定死的, 会收到受应用到的绘制区域限制;
                                                                                    所以一般这个参数根据Rect(绘制区域)的参数定义;
            ctx.strokeStyle = linearGradients.addColorStop(0, color);                 声明渐变颜色(0-1之间的数值, color);

        径向渐变:
            var radialGradients = ctx.createRadialGradient(x1,y1,r1, x2,y2,r2);          声明渐变类型(参数规定一个圆的(x,y,半径)和第二个圆的(x,y,半径));
                                                                                            同样声明的区域如果超出应用的绘制区域会不显示, 受限制;
            radialGradients.addColorStop(0, 'red');                                      声明渐变颜色(0-1之间的数值, color);
            
            
    
    绘制图片:
        var pattern = ctx.createPattern(img, 'repeat');                                       有这个方法,可以用于指定图片;
        ctx.fillStyle = pattern;                                                              填充图片;
        以上做个了解, 绘制图片经常用的是drawImage()方法;
        ctx.drawImage(img, x, y, widht, height);                                              绘制图片(这些参数用于绘制img整个图片);              
        ctx.drawImage(img, x, y, widht, height, x, y, width, height);                         绘制图片(后面这些参数用来指定绘制出来img整个图片的某个部分);
        ctx.clip();                                                                           剪裁图片


    绘制文字:
        ctx.font = 'weight style size family'                                               声明文字颜色规格(加粗,斜体,..,..);
        ctx.fillText('文字内容', x, y);                                                     绘制填充文字(内容, x, y);
        ctx.shadowColor = 'red';                                                              绘制阴影颜色;
        ctx.shadowBlur = num;                                                                 绘制阴影聚焦程度;
        ctx.shadowOffsetX = num;                                                              绘制阴影X轴位置;
        ctx.shadowOffsetY = num;                                                              绘制阴影Y轴位置;
            

    图像组合重叠:
        ctx.globalCompositeOperation                                                          定义新图像如何绘制到已有的图像上

            目标图像:
                destination-over;                                                             重叠区域:目标图像覆盖源对象;
                destination-atop;                                                             只显示和源对象重叠的部分和源图像整个部分;
                destination-in;                                                               只显示和源对象重叠的部分;
                destination-out;                                                              只显示目标图像部分;源图像和重叠部分不限时

            源图像:
                source-over;                                                                  重叠:源图像覆盖目标对象;
                source-atop;                                                                  只显示和目标对象重叠的部分和目标图像整个部分;
                source-in;                                                                    只显示和目标对象重叠的部分;
                source-in;                                                                    只显示源图像部分;目标图像和重叠部分不限时


        
    window.requestAnimationFrame(move);
        系统会结合硬软件配置, 来自定指定一种动画, 相比定时器和延时器可以手动定义执行时间的方法比起来, 这个方法执行时不会失真;
    


    

    水平全景滚动:
        ctx.translate(x,y);                                                                     定义偏移量;
        ctx.save();                                                                             保存当前环境的状态包括(颜色, 宽高, 坐标);
        ctx.restore();                                                                          返回之前保存过的路径状态和属性;
            save和restore的存储方式是栈存储的方式(既先存储后取得, 后存储先取得);
            
    
    图形的基本元素就是路径, 无论是矩形,圆形,三角形都是有一条条路径组成的;
        1.创建其实点;                                       beginPath();
        2.使用画图命令画出路径;                               moveTo(), lineTo();
        3.路径绘制结束后闭合路径;                             closePath();
        4.通过描边或填充的方式绘制图形;                        stroke(), fill();
    
    
        beginPath()                                     路径开始声明;
        moveTo(x,y)                                     指定开始落笔点;
        lineTo(x,y);                                    指定过程落笔点;
        closePath();                                    路径闭合声明;
        stroke();                                       描边声明;
        fill();                                         填充声明;
        

    
    
    
    
    
    
    
    
    
    
    
    
    

拾贰.Handlebars

    上级数据使用../xxx, 本级数据使用this即可;
    
    @index指定当前索引, 

    registerHelper 注册helper(自定义块级标签) 可以规定索引值从1开始, 第一个参数是自定义标签名称 可以随意命名;
    Handlebars.registerHelper('addOne', function (ind, option) {return xxx})
    使用时应用 {{addOne 空格 @index}}即可

    registerHelper 注册helper(自定义行级标签) 可以不用指定option参数;
    Handlebars.registerHelper('format', function (sex) {return xxx})
    使用时就没有 #开头 /结尾, 而是直接应用一个但标签后面跟参数即可 {{format sex}} 
    
    if 后面的条件如果是 空串, 空数组, 空对象, 0, false, undefined, null都将返回false;

    三个花括号会将字符串形式的 html 代码转义

    with标签 就是进入到数据的一个属性当中, 
        {{#with hobby}}
            {{#each this}}
            <p>{{name}}</p>
            {{/each}}
        {{/with}}

        以上with的写法也可以不实用with如下:
        
        {{#each hobby}}
            <p>{{name}}</p>
        {{/each}}

        输出结果是一样的;
        







    