博学之, 审问之, 慎思之, 明辨之, 笃行之;
壹、贰、叁、肆、伍、陆、柒、捌、玖、拾;




壹.实例化VUE对象;

    index.html

        <div id="vue-app"></div>                    根容器


    app.js
        new Vue({
            el: element,                            #vue-app的跟容器;
            data: {}                                用于数据的存储, 定义一个对象, 里面可以存储任何类型的值;
        })







贰.数据&方法;
    
    new Vue({
        el: element,                                    #vue-app的跟容器;
        data: {},                                       用于数据的存储, 定义一个对象, 里面可以存储任何类型的值;
        methods: {greet: function(param) {}},           存储各种方法;
            methods中的方法可以在index.html的标签模版中传参
            方法中可以this.attr 即可拿到实例中的属性;不需要this.data.attr;
        
    })











叁.属性绑定;
    
    v-bind: 可以简写为  :
    v-bind:标签上的属性="data下的属性";
        <a v-bind:href="website">leechense</a>

    v-html="data下的属性"
        <p v-html="websiteTag"></p>
        会将data下websiteTag的内容以解析为 html标签 插入到p标签中;











肆.事件
    
    <button v-on:click="age++">涨一岁</button>
    <button v-on:click="age--">减一岁</button>
        也可实现对于data下age属性的直接操作;
    
    v-on:click='updataXY'   简写为  @click='updataXY'
    
    注意事件对象如果在html中    @mousemove='updataXY()'         形式在app.js中拿不到事件对象;
                             @mousemove='updataXY($event)'  形式在app.js中可以拿到事件对象;
                            @mousemove='updataXY'           形式也可在app.js中拿到事件对象;


    
    








伍.事件修饰符

    事件修饰符也可以组合使用
    <a v-on:click.stop.prevent="doThat"></a>

    @mousemove.stop                                 阻止事件冒泡;
    @click.once                                     只触发一次事件;
    @click.self                                     事件在当前标签上触发的, 而不是在当前标签的子元素上触发的;
    @click.prevent                                  阻止默认事件
    @click.capture                                  事件捕获;
    @click.passive                                  滚动行为立即出发, 不会等待onscroll;
    
    
    <!-- 阻止单击事件继续传播 -->
    <a v-on:click.stop="doThis"></a>

    <!-- 提交事件不再重载页面 -->
    <form v-on:submit.prevent="onSubmit"></form>

    <!-- 修饰符可以串联 -->
    <a v-on:click.stop.prevent="doThat"></a>

    <!-- 只有修饰符 -->
    <form v-on:submit.prevent></form>

    <!-- 添加事件监听器时使用事件捕获模式 -->
    <!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 -->
    <div v-on:click.capture="doThis">...</div>

    <!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
    <!-- 即事件不是从内部元素触发的 -->
    <div v-on:click.self="doThat">...</div>













陆.键盘事件及键值修饰符;
    .enter
    .tab                                                                
    .delete                                                             (捕获“删除”和“退格”键)
    .esc
    .space
    .up
    .down
    .left
    .right
    .ctrl
    .alt
    .shift
    .meta                                                               对应的是mac下的command键, win下的windows键;


    .exact                                                              修饰符允许你控制由精确的系统修饰符组合触发的事件。                                                                          
        <!-- 即使 Alt 或 Shift 被一同按下时也会触发 -->
        <button v-on:click.ctrl="onClick">A</button>

        <!-- 有且只有 Ctrl 被按下的时候才触发 -->
        <button v-on:click.ctrl.exact="onCtrlClick">A</button>

        <!-- 没有任何系统修饰符被按下的时候才触发 -->
        <button v-on:click.exact="onClick">A</button>













柒.双向数据绑定
    双向数据绑定一定是和input, textarea, select是有关系的;
    ref:    被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的$refs对象上。如果在普通的DOM元素上使用，那么指向的就是普通的DOM元素

    v-model双向数据绑定
        其实是先绑定了app.js的name属性到input, textarea, select这些表单元素上;
        如果name属性有对应的值, input开始就会对应name的值渲染到页面上, 所以数据是双向的;














捌.计算属性Computed
    methods中的某一个方法一旦被触发之后, 就将会触发methods中所有的方法, 导致每次都会渲染DOM结构, 是很耗费性能的;
    computed和methods用法上很相似, 但是会避免methods以上的一些问题, 整体优化有一些不同;
    执行某个属性就单只执行某个属性, 而不会将computed中的属性全部执行;
    
    computed可以理解为具有方法功能的属性; 它的执行时不可以添加()来执行
        {{addToA()}}        会找methods中的方法;
        {{addToA}}          会找data中的属性或者computed中的方法, 所以computed归根结底的定义还是属性, 而非方法;








玖.动态绑定CSS样式;
    <div :class="{red:true, blue:false}"></div>
    <!-- 会添加red的类名, 且不添加blue类名, 并没有在data中有指定的属性, 这是固定写法, 如果值为true则有, 反之则无; -->

    






    


拾.v-if指令;

    v-if语法形式: v-if="error"
                v-else-if="success"
                v-else

    v-if                    条件为真显示, 条件为假形成一条注释;
    v-else-if               配合v-if两个标签不显示或只显示一条;
    v-else                  配合v-if两个标签只会显示一条;
    

    v-show语法形式: v-show="error"    
    v-show                  条件为真显示, 条件为假会加上display:none;













拾壹.V-for指令;
    template只会循环h3和p, 不会循环template, template是Vue内置的标签;
        会把div一块循环
            <div v-for="(user, index) in users">
                <h3>{{index}}. {{user.name}}</h3>
                <p>{{user.age}}</p>
            </div>

        template只会循环h3和p, 不会循环template, template是内置的标签;
            <template v-for="(user, index) in users">
                <h3>{{index}}. {{user.name}}</h3>
                <p>{{user.age}}</p>
            </template>

    :key值必须是一个唯一值, 在新的版本出现之后在遍历时都需要提供一个key值, 代码运行速度会更快一些, 反之虽然不会影响效果展示, 但仍会爆红;
    










拾贰.实例化多个Vue对象;
    实例化多个对象, 给实例对象指定一个变量名称, el指定对应的html中的根元素;
    
    在全局可以操作示例one下的data下的属性, one.title = xxx;
    在可以在two中操作示例one下的data下的title属性, 这就是如何在第二个Vue示例中更改第一个Vue实例中的属性的操作;











拾叁.组件应用;
    可以理解为vue中自定义标签;
    Vue.component("greeting",{
        template: `                                                                             规定自定义组件的内容;
            <div id="root-tag">
                <span>{{name}}: 大家好, 给大家介绍下我的女朋友@关晓彤</span>
                <button @click="changeName">改名</button>
            </div>
        `,  
        data() {                                                                                规定组件中的data属性, 语法是固定的 必须是方法然后return一个对象;                             
            return {
                name: '鹿晗',
            }
        },
        methods: {                                                                              组件中的方法集;
            changeName() {
                this.name = "lincoln";
            }
        }
    })

    千万注意组件中的template一定要有一个根标签

    data() { return {}} 组件中data使用这种形式的原因在于组件和组件中的data属性理论上是不可共享的; 所以把data定义成一个方法,
    然后每一次返回一个对象, 可以达到组件之间的data属性不共用的问题, 另外data() {} 是固定写法, data: {}的形式会报错;















拾肆.搭建脚手架CLI;
    CLI全称: command-line interface             命令行解释程序;
    
    脚手架是基于webpack搭建的开发环境;
    使用ES6语法不必要担心浏览器兼容性, 在脚手架中应用了对应的loader, 在编译过程过中可以将Es6的语法自动转化为浏览器可识别的ES5代码;
    打包和压缩JS为一个文件;
    项目文件在环境中编译, 而不是浏览器中编译, 在脚手架中就已拥基于webpack的开发环境, 所以都是通过webpack编译, 所以速度会很快;
    实现页面自动刷新, 当我们保存完成后, 浏览器不需要重新refresh即可自动刷新页面;

    搭建脚手架必须依赖nodeJS环境, npm包管理(下载好nodeJS就会自带npm包管理工具);

    npm install -g @vue/cli
    # OR
    yarn global add @vue/cli


    vue2.0目录结构介绍:

        build                                       项目构建(webpack)相关代码;
        config                                      配置目录, 包括端口号, 代理地址等;
        node-modules                                npm加载的项目依赖模块;
        src                                         开发目录(源码目录),基本要做的事情都在这里进行;
            assets                                      放置一些图片, 如logo等;
            components                                  目录自带的一个组件目录, 可以不用;
            App.vue                                     项目入口文件, 可以直接将组件写在这里, 而不使用components目录;
            main.js                                     项目核心文件;
            router                                      项目中的路由文件;
        static                                      静态资源目录, 如图片, 字体等;
        index.html                                  首页入口文件;

        package.json                                项目配置文件
        README.md                                   项目说明文档, markdown的格式(其中通常都是一些命令);
    

    一些相关命令, 在pageage.json中可以重指定命令名, README.md中也有写命令说明;
    npm run dev                                     运行项目



    index.html首页入口文件隐私的引入main.js项目核心文件;
    main.js中实例化Vue对象定义了app.vue的组件
    app.vue组件的模版中有内容就会插入到index.html当中渲染;
        同时如果app.vue中有 <router-view/> 是将router下的index.js中的路由相关部分渲染到app.vue组件中,
        而路由中有个HelloWorld组件, 所以app.vue包含了HelloWorld组件;







================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================






    壹、贰、叁、肆、伍、陆、柒、捌、玖、拾;
    壹.组件嵌套;

        import Users from '@/components/Users'
        等同于
        import Users from './components/Users'
        但是@并不是表示 . @表示的是src目录, 所以 @ === src;

        
        
        src/components/
            新建一个组件Users.vue
            Users.vue
                组件文件名开头大写, template下的根容器id最好就是组件名
                name就是组件文件名称, 开头最好也是大写;

        src/main.js
            在全局引入并且注册的组件可以在任何地方调用这个组件,一般不会在全局注册公用的组件, 通常都是局部注册定义和引用;
            全局组件一般会有特殊要求才会使用;
            全局引入组件    import Users from './components/Users',后面可以不加vue文件的后缀, 会自动识别;
            全局注册组件    Vue.component("Users",Users);
            

        src/Home.vue
            在全局引入并且注册的组件可以在任何地方调用这个组件;
            <Users></Users>
            
            局部引入Users组件;
            局部引入组件    import Users from './components/Users'
            局部注册组件    components: {
                            "users":  Users,
                        }
            
            在局部引入并且注册的组件只可在当前组件中调用这个组件;
            <Users></Users>





    贰.组件css作用域;
        在每一组件中的<style></style>上最好添加一个scoped的属性, 指定一个样式域,
        可以避免组件之间的样式冲突: <style scoped> code... </style>

    



    

    叁.简单demo制作;
        src/components/Header.vue
        src/components/Footer.vue
            创建两个组件分别是页面的头和尾;
        
        注意组件中的name的命名不可以和html原生标签命名冲突, 包括H5新增标签header, footer等;



    



    


    肆.属性传值Props;
        父组件: Home.vue
            data() {
                return {
                    // title: "this is Vue cli",
                    users: [
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                        {name: 'LinColn', position: 'lawyer', show: false},
                    ],
                };
            }

            如果在子组件中需要用到users这组数据, 可以通过在子组件调用的地方绑定users;

            <Users :users="users"></Users>

        子组件: users.vue

            在子组件中获取父组件上绑定的值;

            props: {                                            规定从父组件接收值;
                users: {
                    type: Array,                                规定users的类型;
                    required: true                              规定是否是必须依赖, 通常都是true;
                },
                userstwo: {                                     从父组件接收多条数据, 以此类推往下写即可;
                    type: Array,
                    required: true,
                }
                usersthree: {
                    type: Array,
                    required: true,
                }
            }








    伍.传值和传引用;
        传值:       字符串, 数值, 布尔等;
            传值不会对多个组件共用的数据造成影响, 假如一条字符串, 在子组件A中改变了字符串的内容, 此时子组件B不会改变
        传应用:     数组, 对象;
            传引用会对多个组件公用的数据造成影响, 假如一条数组, 在子组件A中改变了数组中的内容, 此时子组件B也会跟着改变

        







    陆.事件传值;
        子组件: header.vue
            当子组件的header点击之后, 会触发@click="changeTip"方法
            我们可以在changeTip方法中注册一个事件:

            this.$emit('changeTip', 'HeaderVue子组件向HomeVue父组件传值');
            
            $emit('声明父组件中自定义的事件名称', '往父组件中传的值');

        父组件: Home.vue
            此时父组件中在 v-header组件上监听 @emit传递的事件名称="updataTip($event)"; $event就是emit传递的第二个参数值;

            <v-header :tip="tip" @changeTip="updataTip($event)"></v-header>
            
            updataTip(tip) {
                this.tip = tip;
            }

            此时改变this.tip 也就是要传给子组件的值, 可以达到, 头部和尾部接受的父组件中的字符串的值的像传引用那样共同改变;
            
        
    






            







    柒.生命周期钩子

        beforeCreate                    没有创建对象之前执行    (通常加载中动画在这里呈现执行);
        created                         实例或组件已创建完成,属性也成功绑定,但DOM并没有生成 (通常在这里请求数据);
        beforeMount                     挂载之前, 开始编译模版(编译template), 虚拟DOM中指定的, 并不能看到对应的内容
        mounted                         挂载完成, 一旦mounted执行, 也就是DOM就已经生成了, DOM进行渲染;
        beforeUpdate                    组件(DOM)发生更新之前执行, 页面就已经展示出来了, 对html元素的操作可以在这段时间进行;
        updated                         组件(DOM)更新完成之后执行, 页面就已经展示出来了, 对html元素的操作可以在这段时间进行;
        beforeDestroy                   组件销毁之前执行;
        destroyed                       组件销毁完成执行;
    

    
    

    
    
    
    
    
    
    

    捌.路由和请求;
        cnpm install vue-router --save-dev                                      安装路由模块;
        cnpm install vue-resource --save-dev                                    安装vue-resource(http请求)模块;



        
        
        main.js                                                                 核心文件中配置路由模块;
            import VueRouter from 'vue-router';                                 引入路由模块;
            import VueResource from 'vue-resource';                             引入请求模块;
            Vue.use(VueRouer);                                                  使用Vue.use中间见声明路由模块的应用;
            Vue.use(VueResource);                                               使用Vue.use中间件声明请求模块的应用;


            const router = new VueRouter({                                      配置路由
                routes: [                                                       规定路线地址, 固定写法;
                    {
                        path: "/",                                              引入Home组件;
                        alias: "/home",                                         别名, 当访问path没有画面时, 可以配置个别名
                        redirect: "/home",                                      重定向, 即使有自己的路径可以访问, 但仍可以重定向到的新的地址;
                        name: "Home",
                        component: Home,
                    },
                    {
                        path: "/helloworld",                                    引入HelloWorld组件;
                        component: HelloWorld,
                    },
                ]
            })

            以上部分不在main核心文件中去配置了, 分离处理到router下的index.js中去写路由;
            前提是将router引入, 然后以下步骤不变;




            new Vue({
                el: '#app',                                                     可以不指定但是, 必须要在后面调用$mount方法来指定#app;
                router,                                                         在实例化中声明使用router
                components: { App },
                template: '<App/>'
            }).$mount('#app');




        app.vue

            让路由在根组件app.vue中展示;
            <router-view></router-view>
            相当与a标签, 用来指定vue中路由的跳转, to属性相当与a标签的href, 好处就是实现不刷新跳转页面;
            <router-link to="/">home</router-link>
            <router-link to="/helloworld">helloworld</router-link>


            页面中如果使用a标签的href进行跳转时, 缺点显而易见, 就是当点击导航时页面会重新刷新然后跳转到导航指定的页面;
            而且vue的路由跳转时不会刷新, 很大程度提高页面运行效率;




        Home.vue
            在home.vue中使用http的应用, 在main.js中已经全局应用了vue-resource模块, 所以可以在任何地方使用this.$http模块;
            
            将自己定义的死数据users干掉, 使用http请求线上的一个接口;

            接口地址:
            https://jsonplaceholder.typicode.com/users


            以下是使用vue-resource($http)的使用;

                this.$http.get('https://jsonplaceholder.typicode.com/users').then((res) => {
                    this.users = res.body;
                }).catch((err) => {
                    console.log(err);
                })












================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================
================================================================================================================================================












拾伍.Vuex
    vue init webpack-simple vuex-playlist
    webpack-simple 旨在创建一个简单的vue项目;
    

    壹、贰、叁、肆、伍、陆、柒、捌、玖、拾;
    壹.一个简单的vue APP;
        创建两个组件分别是product-list-one和product-list-two;
        从父组件中传值products循环渲染到页面上,

    



    贰.搭建vuex中央状态管理;
        cnpm install vuex --save;
        
        本章内容是将products数据抽离出来放到vuex中集中管理, 在和其他组件进行一个对接;

        创建store文件夹下的store.js文件, 用于存储一个数据;


        每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：

            1.Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。

            2.你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。
                
        
        
        

        store.js
            import Vue from 'vue';
            import Vuex from 'vuex';

            Vue.use(Vuex);

            要想在别的地方应用必须导出(export)store;
            export const store = new Vuex.store({
                state: {
                    products: [
                        {name: '柳传志', price: 200},
                        {name: '马云', price: 140},
                        {name: '马化腾', price: 130},
                        {name: '李彦宏', price: 20},
                    ]
                }
            })










    叁.使用computed获取store数据;

        products不从父组件获取, 而是vux的store中获取数据;
        在main.js中应用并使用store;
            
            import store from './store/store';
            new Vue({
                store,
                el: '#app',
                render: h => h(App)
            })


        之前从app.vue中传到product-list-one和two中的products数据删除, 可以从store中获取;
        
        在product-list-one和two中
            computed: {
                products() {
                    this.$store.state.products;
                }
            }

        





    肆.Vuex.Getters
        一个多用的方法不会在每个组件中写,
        vuex提供这种解决方案, 在store.js中写公用的FN, 然后可以通过, this.$store.getters.xxx在每个组件中调用这个方法;







    伍.Vuex.Mutations
        Vuex 中的 mutation 非常类似于事件:
            每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。
            这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数

        调用时, 不能this.$store.matations.xxx调用, 而是 this.$store.commit('xxx')的方式进行激活mutations中的事件方法;
        而且mutations中的事件方法在执行时, 如果和getters中的方法操作的同一条数据, 那么也同样会执行getters中的方法的;
        
        而且VueDevelopmentTool中的vuex管理可以监听任何通过commit('xxx')发送的mutaions中的事件;

        


    

    
    陆.Vuex.Actions
        Action 类似于 mutation，不同在于：

            1.Action 提交的是 mutation，而不是直接变更状态。
            2.Action 可以包含任意异步操作。

        牢记一点:
            commit()    方法触发的  mutations
            dispatch()  方法触发的  actions

            commit和dispatch的参数第一个默认是actions和mutations下的某个方法(type), 第二个参数是方法的传递的参数(payload);
            actions和mutations下的方法中 传递的参数分别为state和context, 第二个参数是commit和dispatch传递的参数;
        
        actions中的方法方法的参数默认接收的不是state, 而是context === store;
            
            通过commit或dispatch传递的 payload和type 两个参数在 VueDevelopmentTool中都可以监听到;
        
        
        
        
    
    
    
    



    柒.Vuex中的辅助函数 MapGetters & MapActions (映射器);

        由于vuex提供的辅助函数使用的是ES6的语法, 不能被浏览器解析, 所以我们需要使用babel进行转换

        安装babel
        cnpm install babel-perset-stage-2 --save
        cnpm install babel-perset-stage-3 --save
        根据版本安装 stage-2不兼容当前版本可以尝试安装stage-3版本;

        在.babelrc文件中进行配置, 把stage-3添加进去;
        ["state-3"]

        首先看.babelrc的配置, 如果有stage-@x的配置就不需要了, 如果没有就需要进行下载安装babel进行配置;


        使用: 哪个组件需要使用getters或actions的映射器就在哪个组件引入然后引用;

        import {mapGetters, mapActions} from 'vuex'
        
            ...mapActions([
                "Actions下的某个方法",
            ])
            ...mapGetters([
                "Getters下的某个方法",
            ])




