Ajax:
    readyState状态码:
        0:  请求未初始化;
        1:  服务器已建立连接;
        2:  请求已接受;
        3:  请求处理中;
        4:  请求已完成, 且响应已就绪;

    HTTP状态码:

        100:        Continue	继续。客户端应继续其请求

        101:        Switching Protocols	切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议

        200:        OK	请求成功。一般用于GET与POST请求

        201:        Created	已创建。成功请求并创建了新的资源

        202:        Accepted	已接受。已经接受请求，但未处理完成

        203:        Non-Authoritative Information	非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本

        204:        No Content	无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档

        205:        Reset Content	重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域

        206:        Partial Content	部分内容。服务器成功处理了部分GET请求

        300:        Multiple Choices	多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择

        301:        Moved Permanently	永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替

        302:        Found	临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI

        303:        See Other	查看其它地址。与301类似。使用GET和POST请求查看

        304:        Not Modified	未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源

        305:        Use Proxy	使用代理。所请求的资源必须通过代理访问

        306:        Unused	已经被废弃的HTTP状态码

        307:        Temporary Redirect	临时重定向。与302类似。使用GET请求重定向

        400:        Bad Request	客户端请求的语法错误，服务器无法理解

        401:        Unauthorized	请求要求用户的身份认证

        402:        Payment Required	保留，将来使用

        403:        Forbidden	服务器理解请求客户端的请求，但是拒绝执行此请求

        404:        Not Found	服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置"您所请求的资源无法找到"的个性页面

        405:        Method Not Allowed	客户端请求中的方法被禁止

        406:        Not Acceptable	服务器无法根据客户端请求的内容特性完成请求

        407:        Proxy Authentication Required	请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权

        408:        Request Time-out	服务器等待客户端发送的请求时间过长，超时

        409:        Conflict	服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突

        410:        Gone	客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置

        411:        Length Required	服务器无法处理客户端发送的不带Content-Length的请求信息

        412:        Precondition Failed	客户端请求信息的先决条件错误

        413:        Request Entity Too Large	由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息

        414:        Request-URI Too Large	请求的URI过长（URI通常为网址），服务器无法处理

        415:        Unsupported Media Type	服务器无法处理请求附带的媒体格式

        416:        Requested range not satisfiable	客户端请求的范围无效

        417:        Expectation Failed	服务器无法满足Expect的请求头信息

        500:        Internal Server Error	服务器内部错误，无法完成请求

        501:        Not Implemented	服务器不支持请求的功能，无法完成请求

        502:        Bad Gateway	作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应

        503:        Service Unavailable	由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中

        504:        Gateway Time-out	充当网关或代理的服务器，未及时从远端服务器获取请求
        
        505:        HTTP Version not supported

    


Axios:
     axios()
     .then(response => console.log(response))
     .catch(err => console.error(err));
     axios是一个promise对象, 有.then和.catch的回掉;

    get请求:    

        axios("http://jsonplaceholder.typicode.com/todos?timeout=5000",{             axios默认是get请求方式;
            _limit: 5,
        })
    
        axios({
            method: 'get',                                                          方式
            url: 'http://jsonplaceholder.typicode.com/todos';                       地址
            params: {};                                                             参数
        })


        axios.get("http://jsonplaceholder.typicode.com/todos",{
            _limit: 5,
        });

        axios.get("http://jsonplaceholder.typicode.com/todos?timeout=5000",{
            _limit: 5,
        });

        axios.get("http://jsonplaceholder.typicode.com/todos?_limit=5");
        
        
    post请求:
        axios({
            method: 'post',                                                          方式
            url: 'http://jsonplaceholder.typicode.com/todos';                       地址
            params: {};                                                             参数
        })


        axios.post("http://jsonplaceholder.typicode.com/todos",{
            _limit: 5,
        });

        axios.post("http://jsonplaceholder.typicode.com/todos?timeout=5000",{
            _limit: 5,
        });

        axios.post("http://jsonplaceholder.typicode.com/todos?_limit=5");
    



     put/patch请求:

        axios.put('http://jsonplaceholder.typicode.com/todos/1', {
            title: 'leechenze.com',
            completed: false
        }).then( res => showOutput(res));

        axios.patch('http://jsonplaceholder.typicode.com/todos/1', {
            title: 'leechenze.com',
            completed: false
        }).then( res => showOutput(res));

        put和patch的区别在于
            put只会返回原来的请求参数;
            patch会返回所有的请求参数;
        



    delete请求;

        axios.delete('http://jsonplaceholder.typicode.com/todos/1')
        .then( res => showOutput(res));

        删除请求的todos/1数据, 返回空对象;


    

    批量请求数据:
        axios.all([
            axios.get('http://jsonplaceholder.typicode.com/todos?_limit=5'),
            axios.get('http://jsonplaceholder.typicode.com/posts?_limit=5')
        ])
        .then(axios.spread((todos, posts) => showOutput(todos)))
        .catch( err => console.log(err));

        axios.spread()方法是结构响应参数(response)的一个方法;



    自定义请求(请求配置设置);
        
        axios.post('http://jsonplaceholder.typicode.com/todos', {
            title: 'leechenze.com',
            completed: false
        },{
            headers: {
                "Content-Type": "application/json",
                "Authorization": "sometoken"
            }
        }).then( res => showOutput(res))
        .catch( err => console.log(err));

        设置之后返回的config就会新增 headers 的设置;

    
    
    TRANSFORM:
        const options = {
            method: "post",
            url: "http://jsonplaceholder.typicode.com/todos",
            data: {
                title: 'hello world'
            },
            transformResponse: axios.defaults.transformResponse.concat(data => {
                data.title = data.title.toUpperCase();
                return data;
            })
        }
        axios(options).then( res => showOutput(res));

        transformResponse就是对发送给后台的响应数据的一个转换;
    
    

    ERROR:

        axios.get("http://jsonplaceholder.typicode.com/todoss")
        .then(res => showOutput(res))
        .catch(err => {
            if(err.response) {
                console.log(err.response.data);
                console.log(err.response.status);
                console.log(err.response.headers);

                if(err.response.status == 404){
                    alert('客户端请求出现问题');
                }else if(err.response.status == 500) {
                    alert('服务端接口出现问题');
                }
                
            }else if(err.request) {
                console.log(err.request);
            }else{
                // 请求既没有发起又没有响应;
                console.error(err.message);
            }
        
        });
    
        err.request: 请求已经发起但是没有响应时;
        err.response: 请求已发起并且已经响应;
        err.message: 当请求既没有发起又没有响应时的信息;
    


    CANCEL TOKEN
        // 全局设置token
        axios.defaults.headers.common['X-Auth-Token'] = 'token值'


        const source = axios.CancelToken.source();
        source.cancel("请求取消");
        axios.get("http://jsonplaceholder.typicode.com/todos?_limit=5",{
            cancelToken: source.token
        })
        .then(res => showOutput(res))
        .catch(thrown => {
            if(axios.isCancel(thrown)){
                console.log('request canceld', thrown.message);
            }
        })
        


    

    请求拦截/响应拦截:

        axios.interceptors.request.use(
            config => {
                console.log(
                    `${config.method.toUpperCase()}
                    request sent to 
                    ${config.url}
                    at
                    ${new Date().getTime()}`
                )
                return config;
            },
            error => {
                return Promise.reject(error);
            }
        )

        axios.interceptors.request.use(function (config) {
            以上步骤需要注意的是回掉中必须return config这一步;
            return config;
        })
        
        列举应用场景:
        请求拦截时的开始加载中动画,
        响应拦截时表明请求成功,即取消加载动画;

        


    AXIOS实例化:
        const axiosInstance = axios.create({
            baseURL: 'http://jsonplaceholder.typicode.com',
        });
        axiosInstance.get('/comments?_limit=5').then(res => showOutput(res));
        
        axios实例一个对象;
        这个对象可以进行get,post等所有请求方式;

    
        


    

    jsonplaceholder 参数API;
        _limit=5                                        只请求5条数据;
        timeout=5000                                    等待5秒如果未能请求成功,就不在请求;     


    




Fetch:
    fetch是原生的JS的一个库, 不是第三方的;
    fetch(url, {
        method: 'GET',
    }).then((response) => {
        // 响应成功;
        response.json(() => {
            
        }).then(() => {
            
        }).catch(() => {

        })
    })
    